{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/adarsh/Clone-using-react/Intern-assignment/todo-full-stack/client/src/components/Context.js\";\nimport React from 'react';\nimport Axios from 'axios';\nconst Context = /*#__PURE__*/React.createContext();\n\nconst reducer = (prevState, action) => {\n  switch (action.type) {\n    case \"TOGGLE\":\n      return {\n        todos: prevState.todos.map(t => {\n          if (t.id === action.payload) {\n            if (t.complete === true) {\n              t.complete = !t.complete;\n            }\n          }\n\n          return t;\n        })\n      };\n\n    case \"TOGGLE_2\":\n      return {\n        todos: prevState.todos.map(t => {\n          if (t.id === action.payload) {\n            if (t.complete === false) {\n              t.complete = !t.complete;\n            }\n          }\n\n          return t;\n        })\n      };\n\n    case \"REMOVE\":\n      return {\n        todos: prevState.todos.filter(t => t.id !== action.payload)\n      };\n\n    case \"ADD\":\n      return {\n        todos: [...prevState.todos, action.payload]\n      };\n\n    default:\n      return prevState;\n  }\n};\n\nexport class Provider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [],\n      dispatch: action => this.setState(prevState => reducer(prevState, action))\n    };\n  }\n\n  componentDidMount() {\n    Axios.get('/todos').then(res => this.setState({\n      todos: res.data\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport const Consumer = Context.Consumer;","map":{"version":3,"sources":["/home/adarsh/Clone-using-react/Intern-assignment/todo-full-stack/client/src/components/Context.js"],"names":["React","Axios","Context","createContext","reducer","prevState","action","type","todos","map","t","id","payload","complete","filter","Provider","Component","state","dispatch","setState","componentDidMount","get","then","res","data","render","props","children","Consumer"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,OAAO,gBAAGF,KAAK,CAACG,aAAN,EAAhB;;AAEA,MAAMC,OAAO,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AAEnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAO;AAAEC,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,CAAC,IAAI;AAErC,cAAGA,CAAC,CAACC,EAAF,KAASL,MAAM,CAACM,OAAnB,EAA4B;AACxB,gBAAKF,CAAC,CAACG,QAAF,KAAe,IAApB,EAA2B;AACvBH,cAAAA,CAAC,CAACG,QAAF,GAAa,CAACH,CAAC,CAACG,QAAhB;AACH;AACJ;;AAED,iBAAOH,CAAP;AAEH,SAVe;AAAT,OAAP;;AAYJ,SAAK,UAAL;AACI,aAAO;AAAEF,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,CAAC,IAAI;AAErC,cAAGA,CAAC,CAACC,EAAF,KAASL,MAAM,CAACM,OAAnB,EAA4B;AACxB,gBAAKF,CAAC,CAACG,QAAF,KAAe,KAApB,EAA4B;AACxBH,cAAAA,CAAC,CAACG,QAAF,GAAa,CAACH,CAAC,CAACG,QAAhB;AACH;AACJ;;AAED,iBAAOH,CAAP;AAEH,SAVe;AAAT,OAAP;;AAYJ,SAAK,QAAL;AACI,aAAO;AACHF,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBM,MAAhB,CAAuBJ,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASL,MAAM,CAACM,OAA5C;AADJ,OAAP;;AAIJ,SAAK,KAAL;AACI,aAAO;AACHJ,QAAAA,KAAK,EAAE,CAAC,GAAGH,SAAS,CAACG,KAAd,EAAqBF,MAAM,CAACM,OAA5B;AADJ,OAAP;;AAIJ;AACI,aAAOP,SAAP;AAtCR;AAwCH,CA1CD;;AA4CA,OAAO,MAAMU,QAAN,SAAuBf,KAAK,CAACgB,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAC1CC,KAD0C,GAClC;AACJT,MAAAA,KAAK,EAAE,EADH;AAEJU,MAAAA,QAAQ,EAAGZ,MAAD,IAAY,KAAKa,QAAL,CAAcd,SAAS,IAAID,OAAO,CAACC,SAAD,EAAYC,MAAZ,CAAlC;AAFlB,KADkC;AAAA;;AAM1Cc,EAAAA,iBAAiB,GAAG;AAChBnB,IAAAA,KAAK,CAACoB,GAAN,CAAU,QAAV,EACKC,IADL,CACUC,GAAG,IAAI,KAAKJ,QAAL,CAAc;AAAEX,MAAAA,KAAK,EAAEe,GAAG,CAACC;AAAb,KAAd,CADjB;AAEH;;AAEDC,EAAAA,MAAM,GAAI;AAEN,wBACI,QAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAE,KAAKR,KAA9B;AAAA,gBACK,KAAKS,KAAL,CAAWC;AADhB;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAlByC;AAqB9C,OAAO,MAAMC,QAAQ,GAAG1B,OAAO,CAAC0B,QAAzB","sourcesContent":["import React from 'react'\nimport Axios from 'axios'\nconst Context = React.createContext()\n\nconst reducer = (prevState, action) => {\n    \n    switch (action.type) {\n        case \"TOGGLE\":\n            return { todos: prevState.todos.map(t => {\n                \n                if(t.id === action.payload) {\n                    if ( t.complete === true ) {\n                        t.complete = !t.complete\n                    } \n                }\n                \n                return t\n                \n            }) }\n\n        case \"TOGGLE_2\": \n            return { todos: prevState.todos.map(t => {\n                \n                if(t.id === action.payload) {\n                    if ( t.complete === false ) {\n                        t.complete = !t.complete\n                    } \n                }\n                \n                return t\n                \n            }) }\n\n        case \"REMOVE\": \n            return {\n                todos: prevState.todos.filter(t => t.id !== action.payload)\n            }\n\n        case \"ADD\":\n            return {\n                todos: [...prevState.todos, action.payload]\n            }\n\n        default:\n            return prevState\n    }\n}\n\nexport class Provider extends React.Component {\n    state = {\n        todos: [],\n        dispatch: (action) => this.setState(prevState => reducer(prevState, action) )\n    }\n\n    componentDidMount() {\n        Axios.get('/todos')\n            .then(res => this.setState({ todos: res.data }))\n    }\n\n    render () {\n        \n        return (\n            <Context.Provider value={this.state}>\n                {this.props.children}\n            </Context.Provider>\n        )\n    }\n}\n\nexport const Consumer = Context.Consumer"]},"metadata":{},"sourceType":"module"}
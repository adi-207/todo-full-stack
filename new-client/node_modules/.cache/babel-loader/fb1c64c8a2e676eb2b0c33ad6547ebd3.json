{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/adarsh/Clone-using-react/Intern-assignment/todo-full-stack/client/src/components/Context.js\";\nimport React from 'react';\nconst Context = /*#__PURE__*/React.createContext();\n\nconst reducer = (prevState, action) => {\n  switch (action.type) {\n    case \"TOGGLE\":\n      return {\n        todos: prevState.todos.map(t => {\n          if (t.id === action.payload) {\n            if (t.complete === true) {\n              t.complete = !t.complete;\n            }\n          }\n\n          return t;\n        })\n      };\n\n    case \"TOGGLE_2\":\n      return {\n        todos: prevState.todos.map(t => {\n          if (t.id === action.payload) {\n            if (t.complete === false) {\n              t.complete = !t.complete;\n            }\n          }\n\n          return t;\n        })\n      };\n\n    case \"REMOVE\":\n      return {\n        todos: prevState.todos.filter(t => t.id !== action.payload)\n      };\n\n    case \"ADD\":\n      return {\n        todos: [...prevState.todos, action.payload]\n      };\n\n    default:\n      return todos;\n  }\n};\n\nexport class Provider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [{\n        id: 1,\n        title: 'Check emails',\n        complete: false\n      }, {\n        id: 2,\n        title: 'Check voicemails',\n        complete: true\n      }, {\n        id: 3,\n        title: 'Check report',\n        complete: false\n      }],\n      dispatch: action => this.setState(prevState => reducer(prevState, action))\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport const Consumer = Context.Consumer;","map":{"version":3,"sources":["/home/adarsh/Clone-using-react/Intern-assignment/todo-full-stack/client/src/components/Context.js"],"names":["React","Context","createContext","reducer","prevState","action","type","todos","map","t","id","payload","complete","filter","Provider","Component","state","title","dispatch","setState","render","props","children","Consumer"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,gBAAGD,KAAK,CAACE,aAAN,EAAhB;;AAEA,MAAMC,OAAO,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AAEnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAO;AAAEC,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,CAAC,IAAI;AAErC,cAAGA,CAAC,CAACC,EAAF,KAASL,MAAM,CAACM,OAAnB,EAA4B;AACxB,gBAAKF,CAAC,CAACG,QAAF,KAAe,IAApB,EAA2B;AACvBH,cAAAA,CAAC,CAACG,QAAF,GAAa,CAACH,CAAC,CAACG,QAAhB;AACH;AACJ;;AAED,iBAAOH,CAAP;AAEH,SAVe;AAAT,OAAP;;AAYJ,SAAK,UAAL;AACI,aAAO;AAAEF,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,CAAC,IAAI;AAErC,cAAGA,CAAC,CAACC,EAAF,KAASL,MAAM,CAACM,OAAnB,EAA4B;AACxB,gBAAKF,CAAC,CAACG,QAAF,KAAe,KAApB,EAA4B;AACxBH,cAAAA,CAAC,CAACG,QAAF,GAAa,CAACH,CAAC,CAACG,QAAhB;AACH;AACJ;;AAED,iBAAOH,CAAP;AAEH,SAVe;AAAT,OAAP;;AAYJ,SAAK,QAAL;AACI,aAAO;AACHF,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBM,MAAhB,CAAuBJ,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASL,MAAM,CAACM,OAA5C;AADJ,OAAP;;AAIJ,SAAK,KAAL;AACI,aAAO;AACHJ,QAAAA,KAAK,EAAE,CAAC,GAAGH,SAAS,CAACG,KAAd,EAAqBF,MAAM,CAACM,OAA5B;AADJ,OAAP;;AAIJ;AACI,aAAOJ,KAAP;AAtCR;AAwCH,CA1CD;;AA4CA,OAAO,MAAMO,QAAN,SAAuBd,KAAK,CAACe,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAC1CC,KAD0C,GAClC;AACJT,MAAAA,KAAK,EAAE,CACH;AACIG,QAAAA,EAAE,EAAE,CADR;AAEIO,QAAAA,KAAK,EAAE,cAFX;AAGIL,QAAAA,QAAQ,EAAE;AAHd,OADG,EAMH;AACIF,QAAAA,EAAE,EAAE,CADR;AAEIO,QAAAA,KAAK,EAAE,kBAFX;AAGIL,QAAAA,QAAQ,EAAE;AAHd,OANG,EAWH;AACIF,QAAAA,EAAE,EAAE,CADR;AAEIO,QAAAA,KAAK,EAAE,cAFX;AAGIL,QAAAA,QAAQ,EAAE;AAHd,OAXG,CADH;AAkBJM,MAAAA,QAAQ,EAAGb,MAAD,IAAY,KAAKc,QAAL,CAAcf,SAAS,IAAID,OAAO,CAACC,SAAD,EAAYC,MAAZ,CAAlC;AAlBlB,KADkC;AAAA;;AAsB1Ce,EAAAA,MAAM,GAAI;AAEN,wBACI,QAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAE,KAAKJ,KAA9B;AAAA,gBACK,KAAKK,KAAL,CAAWC;AADhB;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AA7ByC;AAgC9C,OAAO,MAAMC,QAAQ,GAAGtB,OAAO,CAACsB,QAAzB","sourcesContent":["import React from 'react'\n\nconst Context = React.createContext()\n\nconst reducer = (prevState, action) => {\n    \n    switch (action.type) {\n        case \"TOGGLE\":\n            return { todos: prevState.todos.map(t => {\n                \n                if(t.id === action.payload) {\n                    if ( t.complete === true ) {\n                        t.complete = !t.complete\n                    } \n                }\n                \n                return t\n                \n            }) }\n\n        case \"TOGGLE_2\": \n            return { todos: prevState.todos.map(t => {\n                \n                if(t.id === action.payload) {\n                    if ( t.complete === false ) {\n                        t.complete = !t.complete\n                    } \n                }\n                \n                return t\n                \n            }) }\n\n        case \"REMOVE\": \n            return {\n                todos: prevState.todos.filter(t => t.id !== action.payload)\n            }\n\n        case \"ADD\":\n            return {\n                todos: [...prevState.todos, action.payload]\n            }\n\n        default:\n            return todos\n    }\n}\n\nexport class Provider extends React.Component {\n    state = {\n        todos: [\n            {\n                id: 1,\n                title: 'Check emails',\n                complete: false\n            },\n            {\n                id: 2,\n                title: 'Check voicemails',\n                complete: true\n            },\n            {\n                id: 3,\n                title: 'Check report',\n                complete: false\n            }\n        ],\n        dispatch: (action) => this.setState(prevState => reducer(prevState, action) )\n    }\n\n    render () {\n        \n        return (\n            <Context.Provider value={this.state}>\n                {this.props.children}\n            </Context.Provider>\n        )\n    }\n}\n\nexport const Consumer = Context.Consumer"]},"metadata":{},"sourceType":"module"}